// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package facts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FactsClient is the client API for Facts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FactsClient interface {
	CreateFact(ctx context.Context, in *Fact, opts ...grpc.CallOption) (*FactID, error)
}

type factsClient struct {
	cc grpc.ClientConnInterface
}

func NewFactsClient(cc grpc.ClientConnInterface) FactsClient {
	return &factsClient{cc}
}

func (c *factsClient) CreateFact(ctx context.Context, in *Fact, opts ...grpc.CallOption) (*FactID, error) {
	out := new(FactID)
	err := c.cc.Invoke(ctx, "/facts.facts/CreateFact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FactsServer is the server API for Facts service.
// All implementations must embed UnimplementedFactsServer
// for forward compatibility
type FactsServer interface {
	CreateFact(context.Context, *Fact) (*FactID, error)
	mustEmbedUnimplementedFactsServer()
}

// UnimplementedFactsServer must be embedded to have forward compatible implementations.
type UnimplementedFactsServer struct {
}

func (UnimplementedFactsServer) CreateFact(context.Context, *Fact) (*FactID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFact not implemented")
}
func (UnimplementedFactsServer) mustEmbedUnimplementedFactsServer() {}

// UnsafeFactsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FactsServer will
// result in compilation errors.
type UnsafeFactsServer interface {
	mustEmbedUnimplementedFactsServer()
}

func RegisterFactsServer(s grpc.ServiceRegistrar, srv FactsServer) {
	s.RegisterService(&Facts_ServiceDesc, srv)
}

func _Facts_CreateFact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FactsServer).CreateFact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/facts.facts/CreateFact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FactsServer).CreateFact(ctx, req.(*Fact))
	}
	return interceptor(ctx, in, info, handler)
}

// Facts_ServiceDesc is the grpc.ServiceDesc for Facts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Facts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "facts.facts",
	HandlerType: (*FactsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFact",
			Handler:    _Facts_CreateFact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "facts.proto",
}
